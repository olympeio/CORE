workflow:
  rules:
    # allow to publish a package from the Gitlab UI, on upgrade branch
    - if: '$CI_PIPELINE_SOURCE == "web"'
      when: always
    # disable pipeline when pushing on master (when running release scripts) and upgrade (when running smooth upgrade pipeline)
    - if: '$CI_COMMIT_BRANCH == "master" || $CI_COMMIT_BRANCH == "upgrade"'
      when: never
    - when: always

.init:
  image:
    name: registry.caas.olympe.io/infra/docker/node-tools-light:14-bullseye-slim
  tags:
    - eks

# Initialize the npm environment with gitlab registry
.npm-config:
  extends: .init
  variables:
    VAULT_ADDR: https://vault.olympe.io
    VAULT_AUTH_ROLE: gitlab-ci
  before_script:
    - export VAULT_TOKEN="$(vault write -field=token auth/jwt/login role=${VAULT_AUTH_ROLE} jwt=$CI_JOB_JWT)"
    - export GITLAB_TOKEN=$(vault kv get -field token kv/devops/npm/token)
    # core npm registry
    - npm config set @olympeio:registry https://gitlab.caas.olympe.io/api/v4/projects/236/packages/npm/
    - npm config set '//gitlab.caas.olympe.io/api/v4/projects/236/packages/npm/:_authToken' "$GITLAB_TOKEN"

stages:
  - setup
  - build
  - unit-tests
  - publish-lib

# Initialize the npm environment and install packages
setup:
  stage: setup
  extends: .npm-config
  script:
    - npm install
  artifacts:
    expire_in: 1 day
    paths:
      - node_modules/

# Build npm package
build-package:
  stage: build
  extends: .init
  dependencies:
    - setup
  script:
    - if [ -z "$CI_COMMIT_TAG" ]; then apt-get install -y jq; sh ./bumpVersion.sh; fi
    - npm run build;
  artifacts:
    paths:
      - dist/

# Run unit tests
tests:
  stage: unit-tests
  extends: .init
  dependencies:
    - setup
  image: # Use an image that includes chromium and jre for test
    name: registry.caas.olympe.io/infra/docker/node-tools:14-bullseye-slim
  script:
    - npm test

# publish
#  - a package tagged "dev" when pushing on develop
#  - a package tagged "upgrade" upon manual trigger from Gitlab CI on upgrade (see workflow rules)
#  - in all other cases, publishing is skipped
publish:
  stage: publish-lib
  extends: .npm-config
  dependencies:
    - build-package
  variables:
    NPM_PUBLISH_TAG: "dev"
  script:
    - cd dist
    - if [ "$CI_COMMIT_BRANCH" == "upgrade" ]; then NPM_PUBLISH_TAG="upgrade"; fi
    - npm publish --tag "$NPM_PUBLISH_TAG"
  rules:
    - if: $CI_COMMIT_TAG # publish of released version in private registry is managed by /olympeio/extensions/npm-registry scripts
      when: never
    - if: '($CI_COMMIT_BRANCH == "develop" && $CI_PIPELINE_SOURCE == "push") || $CI_COMMIT_BRANCH == "upgrade"'
      when: always

# Publish to public npm registry (npmjs.org). Publish only if a new version tag vX.Y.Z was pushed.
publish-public:
  stage: publish-lib
  dependencies:
    - build-package
  image:
    name: node:14-bullseye-slim # Original node image to keep the public registry npmjs.org
  tags:
    - eks
  script:
    - npm config set '//registry.npmjs.org/:_authToken' "$NPM_TOKEN"
    - cd dist
    - npm publish --access public
  only:
    refs:
      - tags
    variables:
      - $CI_COMMIT_TAG =~ /^v\d+\.\d+\.\d+$/
