{"operations":[{"o":1,"p":{"01621fb84e320000f001":"public","01692aa71f3108454479":true,"fdff023000000000000011":"Reduce","ff023000000000000011":"Reduce","v":2},"t":"017cbcf4ca0f68e43d91"},{"o":1,"p":{"01740c5d4ae4b520dd01":0,"ff023000000000000011":"Control Flow","v":1},"t":"017cbcf4ca0f7d2eb4fc"},{"o":1,"p":{"01740c5d4ae4b520dd01":0,"ff023000000000000011":"Control Flow","v":1},"t":"017cbcf4ca348aa21f3e"},{"o":1,"p":{"01703376c4a81c0e9d91":"Executes a function on each item of a list to create a unique \"reduced\" value from it.","01703376c4a81c0e9d92":"The reduce brick executes the user-provided function (reducer) on each item of the provided list, passing in the return value from the calculation on the preceding element.\nThe final result of running the reducer across all elements or the list is the single `result` output value of the brick.\n\n<br>\nIn other words, `Reduce` derives a single value from multiple elements of an array and is equivalent to Javascript's <a href=\"https://medium.com/@JeffLombardJr/understanding-foreach-map-filter-and-find-in-javascript-f91da93b9f2c\" target=\"_blank\">reduce()</a>\n\n<br>\nThe output control flow is triggered when all items have been processed.\n\n\n\nAn initial value can be provided to process the first element of the list.\n\n## Example:\n- inputs\n  1. list = `[1, 2, 3]`\n  2. reducer = `(sum, item) => sum + item`\n  3. initial value = 0\n- outputs\n  1. result = 6\n\n","v":667},"t":"017cbcf9279af340c30d"},{"o":1,"p":{"v":1},"t":"017cbcf927d2af6931ae"},{"o":1,"p":{"v":1},"t":"017cbcf927ff4aa15a54"},{"o":1,"p":{"01740c5d4ae4b520dd01":1,"ff023000000000000011":"list","v":1},"t":"017cbcf931e708e962cd"},{"o":1,"p":{"01703376c4a81c0e9d92":"The original list to iterate on.","v":1},"t":"017cbcf93218912a0954"},{"o":1,"p":{"01740c5d4ae4b520dd01":2,"ff023000000000000011":"reducer","v":1},"t":"017cbcf933f9de53cfb8"},{"o":1,"p":{"01703376c4a81c0e9d92":"The function to execute for each item of the list and returns the next resulting value.<br>Inputs<br>- `start (Control Flow)`: Triggered when the item is to be processed.<br>- `accumulator (Object)`: The object accumulating the values across all list items.<br>- `item (Object)`: The current item of the list.<br>- `rank (Number)`: The rank of the current item.<br>- `list (List)`: The full list being iterated.<br><br>Outputs:<br>- `end (Control Flow)`: Triggered when the processing is completed.<br>- `result (Object)`: The object accumulating the values. Once all list items have been processed, it becomes `Reduce`'s `result`.","v":272},"t":"017cbcf93419e84333bc"},{"o":1,"p":{"01740c5d4ae4b520dd01":1,"ff023000000000000011":"result","v":1},"t":"017cbcf96e866467527d"},{"o":1,"p":{"01703376c4a81c0e9d92":"The return value after calling the reducer on all items of the list.","v":1},"t":"017cbcf96ea2780e8b1f"},{"o":1,"p":{"01740c5d4ae4b520dd01":3,"ff023000000000000011":"initial value","v":1},"t":"017cbd285f152c11f040"},{"o":1,"p":{"01703376c4a81c0e9d92":"The initial `resulting value`","v":1},"t":"017cbd285f3d058c2b52"}],"optionalOperations":[],"rootTag":"017cbcf4ca0f68e43d91"}
