{"operations":[{"i":-1,"o":1,"p":{"01740c5d4ae4b520dd01":0,"ff023000000000000011":"Control Flow","v":1},"t":"0185792773ab34f80073"},{"i":-1,"o":1,"p":{"01740c5d4ae4b520dd01":0,"ff023000000000000011":"Control Flow","v":1},"t":"0185792773ab93b3cefc"},{"i":-1,"o":1,"p":{"01621fb84e320000f001":"public","01692aa71f3108454479":true,"fdff023000000000000011":"Register Health Check","ff023000000000000011":"Register Health Check","v":27},"t":"0185792773abd926fe83"},{"i":-1,"o":1,"p":{"01703376c4a81c0e9d91":"Register a lambda function called to check if an application is healthy.","01703376c4a81c0e9d92":"This brick is aimed to be used in Service Applications (backend) for infrastructure managers to check whether the running services are still running properly. (e.g.: [Kubernetes Livenessprobe](https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/))\n\nIt is typically used in a Service, and called once when the service is loaded.\n\nThe `Check` lambda input is called with a new input control flow every time the infrastructure needs to check if the backend is still up and running. If it returns a control flow, the application will be considered as healthy and uses the valid message output to show it.\nIf `Check` returns an error flow, it means the application is not healthy and should probably be rebooted by the infrastructure manager.","v":1062},"t":"018579278b876e15641d"},{"i":-1,"o":1,"p":{"v":1},"t":"018579278bb93465e748"},{"i":-1,"o":1,"p":{"v":1},"t":"018579278be59fdcbaf8"},{"i":-1,"o":1,"p":{"01740c5d4ae4b520dd01":1,"ff023000000000000011":"Check","v":7},"t":"01857927989b7a16e6a0"},{"i":-1,"o":1,"p":{"01703376c4a81c0e9d92":"The lambda function called every time the system want to check the liveness and health of the application running this brick.","v":145},"t":"0185792798f780590f58"}],"optionalOperations":[],"rootTag":"0185792773abd926fe83"}
