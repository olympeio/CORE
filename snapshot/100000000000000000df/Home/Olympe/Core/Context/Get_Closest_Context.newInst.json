{"operations":[{"i":-1,"o":1,"p":{"01621fb84e320000f001":"public","01692aa71f3108454479":true,"01703376c4a81c0e9d94":"experimental","fdff023000000000000011":"Get Closest Context","ff023000000000000011":"Get Closest Context","v":26},"t":"01833b2bd5b1be12d776"},{"i":-1,"o":1,"p":{"01703376c4a81c0e9d91":"Return the closest parent context of the given type","v":3},"t":"01833b30d55abea14d3c"},{"i":-1,"o":1,"p":{"01740c5d4ae4b520dd01":0,"ff023000000000000011":"model type","v":12},"t":"01833b3107aa673da099"},{"i":-1,"o":1,"p":{"01703376c4a81c0e9d92":"tag of the \"type\" of context that you are looking for. You can also provide the value named value such as:\n\n- `application` : return the context of the running Application\n- `screen` : in UI app, return the context of the running screen\n- `composition` : return the closest context in the composition tree. From a lambda (iternator for exemple), it will return the context of the brick in which the lambda is attached.","v":3},"t":"01833b3107f625d9dc87"},{"i":-1,"o":1,"p":{"01740c5d4ae4b520dd01":0,"ff023000000000000011":"context","v":9},"t":"01833b310d1c18bc6f6a"},{"i":-1,"o":1,"p":{"v":1},"t":"01833b310d70619ce733"}],"optionalOperations":[],"rootTag":"01833b2bd5b1be12d776"}
