{
  "rootTag": "0162e331fae562c33ef7",
  "operations": [
    {
      "o": 1,
      "t": "0162e331fae562c33ef7",
      "p": {
        "01703376c4a81c0e9d94": "stable",
        "v": 2,
        "fdff023000000000000011": "Parse Json",
        "01692aa71f3108454479": true,
        "01621fb84e320000f001": "public",
        "ff023000000000000011": "Parse JSON"
      },
      "i": -1
    },
    {
      "o": 1,
      "t": "0162e3322c583d0cbd93",
      "p": {
        "01740c5d4ae4b520dd01": 0,
        "v": 1,
        "ff023000000000000011": "result"
      },
      "i": -1
    },
    {
      "o": 1,
      "t": "017b35893b73ed20429e",
      "p": {
        "01703376c4a81c0e9d92": "Parses a JSON string and extracts the object specified by the path.\n\nThe path is specified in dotted form.\n\n\n**Examples**:\n```\nParseJson({ \"a\": { \"b\": \"hello\"}}, 'a.b') -> \"hello\"\nParseJson(['a', 'b', 'c'], 1) -> 'b'\nParseJson({ \"03. my key\": true}, '[\"03. my key\"]') -> true\n```\nFull doc of the syntax supported: [jsonpath-plus](https://www.npmjs.com/package/jsonpath-plus). A list is returned when multiple results are found.",
        "01703376c4a81c0e9d91": "Parse a JSON string.",
        "v": 1
      },
      "i": -1
    },
    {
      "o": 1,
      "t": "0162e331fc8fe5716519",
      "p": {
        "01740c5d4ae4b520dd01": 0,
        "v": 1,
        "ff023000000000000011": "source"
      },
      "i": -1
    },
    {
      "o": 1,
      "t": "0162e33251904fd5ad37",
      "p": {
        "01740c5d4ae4b520dd01": 1,
        "v": 1,
        "ff023000000000000011": "path"
      },
      "i": -1
    },
    {
      "o": 1,
      "t": "017b3589427a301f1fd8",
      "p": {
        "01703376c4a81c0e9d92": "The object instance.",
        "v": 1
      },
      "i": -1
    },
    {
      "o": 1,
      "t": "017b35893f7100a7893c",
      "p": {
        "01703376c4a81c0e9d92": "The JSON string.",
        "v": 1
      },
      "i": -1
    },
    {
      "o": 1,
      "t": "017b35893f715803831d",
      "p": {
        "01703376c4a81c0e9d92": "The path where the object is. Wildcard (*), recursion (..), range ([start:end:step] are supported.)",
        "v": 1
      },
      "i": -1
    }
  ],
  "optionalOperations": []
}
